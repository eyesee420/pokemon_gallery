import Head from 'next/head';
import { useState } from 'react';
import { Inter } from 'next/font/google';
import styles from '@/styles/Home.module.css';
import Image from 'next/image'
import { SimpleGrid, Box,  Center, Heading, Input, Button,
   Modal, ModalOverlay, ModalContent, ModalHeader, ModalBody, 
   ModalCloseButton, Text ,InputGroup ,InputRightElement , useToast} from '@chakra-ui/react';
import { SmallCloseIcon } from '@chakra-ui/icons'


export async function getStaticProps() {
  const limit = 100;
  const response = await fetch(`https://pokeapi.co/api/v2/pokemon/?limit=${limit}`);
  const data = await response.json();

  const pokemonDataPromises = data.results.map(async (pokemon) => {
    const response = await fetch(pokemon.url);
    return await response.json();
  });

  const pokemonData = await Promise.all(pokemonDataPromises);

  return {
    props: {
      pokemonData,
    },
  };
}

export default function Home({ pokemonData }) {
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedPokemon, setSelectedPokemon] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 20;
  const filteredPokemonData = pokemonData.filter((pokemon) =>
    pokemon.name.toLowerCase().includes(searchTerm.toLowerCase())
  );
  const totalPages = Math.ceil(filteredPokemonData.length / itemsPerPage);



  const handleSearchChange = (e) => {
    setSearchTerm(e.target.value);
  };

  const handlePokemonClick = (pokemon) => {
    setSelectedPokemon(pokemon);
    setIsModalOpen(true);
  };

  const handleModalClose = () => {
    setSelectedPokemon(null);
    setIsModalOpen(false);
  };

  const toast = useToast()

  const handlePrevPage = () => {
    if (currentPage === 1) {
      toast({
        title: 'No Previous',
        description: "this is the last page",
        status: 'error',
        duration: 3000,
        isClosable: true,
      })
    }else {
      setCurrentPage((prevPage) => prevPage - 1);
    }


  };

const handleNextPage = () => {
    if (currentPage === totalPages) {
      toast({
        title: 'No More Next Pages',
        description: "this is the last page",
        status: 'error',
        duration: 3000,
        isClosable: true,
      })
    }else {
      setCurrentPage((prevPage) => prevPage + 1);
    }
  };

  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = filteredPokemonData.slice(indexOfFirstItem, indexOfLastItem);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box>
        <Center>
          <Heading marginTop={10} as="h2" size="xl">
            Pokemon Gallery
          </Heading>
        </Center>

        <Box marginTop={5} p={10} >
        {/* <Box bg={'gray'} > */}
          <Center>

          <InputGroup maxWidth={500}>
                <Input
                        // maxWidth={500}
                        placeholder="Search Pokemon"
                        _placeholder={{ opacity: 1, color: 'gray.500' }}
                        value={searchTerm}

                        onChange={handleSearchChange}
                      />
              <InputRightElement>
                <SmallCloseIcon color='' />
              </InputRightElement>
            </InputGroup>
 
          </Center>
          </Box>


        <Box paddingRight={10} paddingLeft={10}>
          <SimpleGrid minChildWidth="200px" spacing={10}>
            {currentItems.map((pokemon) => (
              <Box key={pokemon.id} borderWidth="2px" borderRadius="xl">
                <Center>
                  <Box paddingTop={5}>
                    <Center>
                      <Image
                      width={100}
                      height={100}
                        // objectFit="cover"
                        priority
                        src={pokemon.sprites.front_shiny}
                        alt=""
                        onClick={() => handlePokemonClick(pokemon)}
                      />
                    </Center>
                  </Box>
                </Center>
                <Center paddingBottom={5}>
                  <p>{pokemon.name}</p>
                </Center>
              </Box>
            ))}
          </SimpleGrid>
        </Box>

        <Box mb={100} display="flex" justifyContent="center" mt={4}>
        {/* Previous Page Button */}
        <Button disabled={currentPage === 1} onClick={handlePrevPage} mr={2}>
          Previous
        </Button>

        {/* Page Numbers */}
        {Array.from({ length: totalPages }, (_, index) => index + 1).map((pageNum) => (
          <Button
            key={pageNum}
            variant={currentPage === pageNum ? 'solid' : 'outline'}
            onClick={() => setCurrentPage(pageNum)}
            mr={2}
          >
            {pageNum}
          </Button>
        ))}

        {/* Next Page Button */}
        <Button disabled={currentPage === totalPages} onClick={handleNextPage}>
          Next
        </Button>
      </Box>

        <Modal isOpen={isModalOpen} onClose={handleModalClose}>
          <ModalOverlay />
          <ModalContent margin={10}>
            <ModalCloseButton />
            <ModalBody>
              {selectedPokemon && (
                <Center>
                  <Image
                    src={selectedPokemon.sprites.other['official-artwork'].front_shiny}
                    alt=""
                  />
                </Center>
              )}
            </ModalBody>
            <Center>
              {selectedPokemon && (
                <Heading as="h4" size="lg" marginBottom={5}>
                  {selectedPokemon.name}
                </Heading>
              )}
            </Center>
          </ModalContent>
        </Modal>
      </Box>
    </>
  );
}
